package gen.db;

1.import java.sql.Connection;  
2.import java.sql.DatabaseMetaData;  
3.import java.sql.DriverManager;  
4.import java.sql.PreparedStatement;  
5.import java.sql.ResultSet;  
6.import java.sql.ResultSetMetaData;  
7.  
8.  
9.public class XZou {  
10.  
11.    static Connection con = null;  
12.  
13.    static {  
14.  
15.        try {  
16.            Class.forName("com.mysql.jdbc.Driver");  
17.  
18.            con = DriverManager  
19.                    .getConnection(  
20.                            "jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf-8",  
21.                            "root", "root");  
22.  
23.            PreparedStatement pst = con  
24.                    .prepareStatement("drop table if exists user;");  
25.  
26.            pst.execute();  
27.  
28.            pst = con  
29.                    .prepareStatement("create table user(id int auto_increment primary key comment '主键啊',name varchar(20) not"  
30.                            + " null comment '名称啊',age int default 18 comment '年龄啊',salary float(8,2) comment '薪水啊',rq date,sj time,rj timestamp);");  
31.  
32.            pst.execute();  
33.  
34.            String sql = "insert into user (name,age,salary,rq,sj,rj) values (?,?,?,?,?,?)";  
35.  
36.            pst = con.prepareStatement(sql);  
37.  
38.            for (int i = 1; i <= 10; i++) {  
39.  
40.                pst.setString(1, "zs" + i);  
41.  
42.                pst.setInt(2, 17 + i);  
43.  
44.                pst.setFloat(3, 2600 + i * 100.0f);  
45.  
46.                long time = System.currentTimeMillis();  
47.  
48.                pst.setDate(4, new java.sql.Date(time));  
49.  
50.                pst.setTime(5, new java.sql.Time(time));  
51.  
52.                pst.setTimestamp(6, new java.sql.Timestamp(time));  
53.  
54.                pst.addBatch();  
55.  
56.            }  
57.  
58.            pst.executeBatch();  
59.  
60.            pst.close();  
61.  
62.        } catch (Exception ex) {  
63.            throw new ExceptionInInitializerError(ex);  
64.        }  
65.    }  
66.      
67.    /** 
68.     * DatabaseMetaData一些用法 
69.     * @throws Exception 
70.     */  
71.    public static void getDBInfo() throws Exception {  
72.          
73.        DatabaseMetaData dbmd = con.getMetaData();  
74.          
75.        System.out.println(dbmd.getDatabaseProductName());//获取数据库产品名称  
76.          
77.        System.out.println(dbmd.getDatabaseProductVersion());//获取数据库产品版本号  
78.  
79.        System.out.println(dbmd.getCatalogSeparator());//获取数据库用作类别和表名之间的分隔符   如test.user  
80.          
81.        System.out.println(dbmd.getDriverVersion());//获取驱动版本  
82.          
83.        System.out.println("*******************可用的数据库列表*********************");  
84.        ResultSet rs = dbmd.getCatalogs();//取可在此数据库中使用的类别名,在mysql中说白了就是可用的数据库名称，只有一列  
85.  
86.        while(rs.next()){  
87.              
88.            System.out.println(rs.getString(1));  
89.        }  
90.          
91.        System.out.println("********************所有表********************************");  
92.        /** 
93.         * catalog 类别名称 
94.         * schemaPattern 用户方案模式， 
95.         * tableNamePattern 表 
96.         * types 类型 
97.         * 获取所有表 
98.         * dbmd.getTables(catalog, schemaPattern, tableNamePattern, types) 
99.         */  
100.          
101.        rs = dbmd.getTables(null, null, null, new String[]{"TABLE"});//参数列表 1:类别名称,2: 模式名称的模式,3:表名称模式,4:要包括的表类型所组成的列表  
102.          
103.        while(rs.next()){  
104.              
105.            /** 所有的列信息。如下 
106.             *  TABLE_CAT String => 表类别（可为 null）  
107.                TABLE_SCHEM String => 表模式（可为 null）  
108.                TABLE_NAME String => 表名称  
109.                COLUMN_NAME String => 列名称  
110.                DATA_TYPE int => 来自 java.sql.Types 的 SQL 类型  
111.                TYPE_NAME String => 数据源依赖的类型名称，对于 UDT，该类型名称是完全限定的  
112.                COLUMN_SIZE int => 列的大小。  
113.                BUFFER_LENGTH 未被使用。  
114.                DECIMAL_DIGITS int => 小数部分的位数。对于 DECIMAL_DIGITS 不适用的数据类型，则返回 Null。  
115.                NUM_PREC_RADIX int => 基数（通常为 10 或 2）  
116.                NULLABLE int => 是否允许使用 NULL。  
117.                columnNoNulls - 可能不允许使用 NULL 值  
118.                columnNullable - 明确允许使用 NULL 值  
119.                columnNullableUnknown - 不知道是否可使用 null  
120.                REMARKS String => 描述列的注释（可为 null）  
121.                COLUMN_DEF String => 该列的默认值，当值在单引号内时应被解释为一个字符串（可为 null）  
122.                SQL_DATA_TYPE int => 未使用  
123.                SQL_DATETIME_SUB int => 未使用  
124.                CHAR_OCTET_LENGTH int => 对于 char 类型，该长度是列中的最大字节数  
125.                ORDINAL_POSITION int => 表中的列的索引（从 1 开始）  
126.                IS_NULLABLE String => ISO 规则用于确定列是否包括 null。  
127.                YES --- 如果参数可以包括 NULL  
128.                NO --- 如果参数不可以包括 NULL  
129.                空字符串 --- 如果不知道参数是否可以包括 null  
130.                SCOPE_CATLOG String => 表的类别，它是引用属性的作用域（如果 DATA_TYPE 不是 REF，则为 null）  
131.                SCOPE_SCHEMA String => 表的模式，它是引用属性的作用域（如果 DATA_TYPE 不是 REF，则为 null）  
132.                SCOPE_TABLE String => 表名称，它是引用属性的作用域（如果 DATA_TYPE 不是 REF，则为 null）  
133.                SOURCE_DATA_TYPE short => 不同类型或用户生成 Ref 类型、来自 java.sql.Types 的 SQL 类型的源类型（如果 DATA_TYPE 不是 DISTINCT 或用户生成的 REF，则为 null）  
134.                IS_AUTOINCREMENT String => 指示此列是否自动增加  
135.                YES --- 如果该列自动增加  
136.                NO --- 如果该列不自动增加  
137.                空字符串 --- 如果不能确定该列是否是自动增加参数  
138. 
139.             */  
140.            System.out.println(rs.getString(3) + "->" + rs.getString(4));//打印表类别,表模式,表名称，列名称，  
141.              
142.  
143.        }  
144.          
145.          
146.        System.out.println("##############################################################");  
147.          
148.        /** 
149.         * catalog 类别名称 
150.         * schema 用户方案名称 
151.         * table 表名 
152.         * 获取指定表的主键信息 
153.         * dbmd.getPrimaryKeys(catalog, schema, table) 
154.         *  
155.         */  
156.        rs = dbmd.getPrimaryKeys("test", null, "user");  
157.          
158.        while(rs.next()){  
159.              
160.            /**  
161.             *  所有列信息如下: 
162.             *  TABLE_CAT String => 表类别（可为 null）  
163.                TABLE_SCHEM String => 表模式（可为 null）  
164.                TABLE_NAME String => 表名称  
165.                COLUMN_NAME String => 列名称  
166.                KEY_SEQ short => 主键中的序列号（值 1 表示主键中的第一列，值 2 表示主键中的第二列）。  
167.                PK_NAME String => 主键的名称（可为 null）  
168. 
169.             */  
170.              
171.            System.out.println(rs.getString(1) + "," + rs.getString(2) + "," + rs.getString(3) + ","  
172.                    + rs.getString(4) + "," + rs.getShort(5) + "," + rs.getString(6));  
173.              
174.        }  
175.          
176.          
177.        System.out.println("##############################################################");  
178.          
179.        /** 
180.         * catalog 类别名称 
181.         * schemaPattern 用户方案，模式 
182.         * tableNamePattern 表 
183.         * columnNamePattern 列 
184.         * 获取表的列信息 
185.         * dbmd.getColumns(catalog, schemaPattern, tableNamePattern, columnNamePattern) 
186.         */  
187.        rs = dbmd.getColumns("test", null, "user", null);  
188.          
189.        while(rs.next()){  
190.              
191.            /** 
192.             * 所有列如下： 
193.             * TABLE_CAT String => 表类别（可为 null）  
194.                TABLE_SCHEM String => 表模式（可为 null）  
195.                TABLE_NAME String => 表名称  
196.                COLUMN_NAME String => 列名称  
197.                DATA_TYPE int => 来自 java.sql.Types 的 SQL 类型  
198.                TYPE_NAME String => 数据源依赖的类型名称，对于 UDT，该类型名称是完全限定的  
199.                COLUMN_SIZE int => 列的大小。  
200.                BUFFER_LENGTH 未被使用。  
201.                DECIMAL_DIGITS int => 小数部分的位数。对于 DECIMAL_DIGITS 不适用的数据类型，则返回 Null。  
202.                NUM_PREC_RADIX int => 基数（通常为 10 或 2）  
203.                NULLABLE int => 是否允许使用 NULL。  
204.                columnNoNulls - 可能不允许使用 NULL 值  
205.                columnNullable - 明确允许使用 NULL 值  
206.                columnNullableUnknown - 不知道是否可使用 null  
207.                REMARKS String => 描述列的注释（可为 null）  
208.                COLUMN_DEF String => 该列的默认值，当值在单引号内时应被解释为一个字符串（可为 null）  
209.                SQL_DATA_TYPE int => 未使用  
210.                SQL_DATETIME_SUB int => 未使用  
211.                CHAR_OCTET_LENGTH int => 对于 char 类型，该长度是列中的最大字节数  
212.                ORDINAL_POSITION int => 表中的列的索引（从 1 开始）  
213.                IS_NULLABLE String => ISO 规则用于确定列是否包括 null。  
214.                    YES --- 如果参数可以包括 NULL  
215.                    NO --- 如果参数不可以包括 NULL  
216.                空字符串 --- 如果不知道参数是否可以包括 null  
217.                SCOPE_CATLOG String => 表的类别，它是引用属性的作用域（如果 DATA_TYPE 不是 REF，则为 null）  
218.                SCOPE_SCHEMA String => 表的模式，它是引用属性的作用域（如果 DATA_TYPE 不是 REF，则为 null）  
219.                SCOPE_TABLE String => 表名称，它是引用属性的作用域（如果 DATA_TYPE 不是 REF，则为 null）  
220.                SOURCE_DATA_TYPE short => 不同类型或用户生成 Ref 类型、来自 java.sql.Types 的 SQL 类型的源类型（如果 DATA_TYPE 不是 DISTINCT 或用户生成的 REF，则为 null）  
221.                IS_AUTOINCREMENT String => 指示此列是否自动增加  
222.                                YES --- 如果该列自动增加  
223.                                NO --- 如果该列不自动增加  
224.                                空字符串 --- 如果不能确定该列是否是自动增加参数  
225. 
226.             */  
227.              
228.               
229.            System.out.println(rs.getString("COLUMN_NAME") + " 类型=" + rs.getInt("DATA_TYPE") + " 列大小=" + rs.getInt("COLUMN_SIZE") +   
230.                    " 注释=" + rs.getString("REMARKS") +  
231.                    " 是否允许为NULL=" + rs.getInt("NULLABLE"));  
232.              
233.              
234.              
235.            //还有很多很多方法，在这里就不一一列举了  
236.              
237.        }  
238.          
239.          
240.    }  
241.      
242.    /** 
243.     * ResultSetMetaData一些用法 
244.     * @throws Exception 
245.     */  
246.    public static void getRsInfo() throws Exception {  
247.          
248.        PreparedStatement pst = con.prepareStatement("select * from user");  
249.          
250.        ResultSet rs = pst.executeQuery();  
251.          
252.        ResultSetMetaData rsmd = rs.getMetaData();//结果集元  
253.          
254.        System.out.println("下面这些方法是ResultSetMetaData中方法");  
255.  
256.        System.out.println("获得1列所在的Catalog名字 : " + rsmd.getCatalogName(1));  
257.  
258.        System.out.println("获得1列对应数据类型的类 " + rsmd.getColumnClassName(1));  
259.  
260.        System.out.println("获得该ResultSet所有列的数目 " + rsmd.getColumnCount());  
261.  
262.        System.out.println("1列在数据库中类型的最大字符个数" + rsmd.getColumnDisplaySize(1));  
263.  
264.        System.out.println(" 1列的默认的列的标题" + rsmd.getColumnLabel(1));  
265.  
266.        //System.out.println("1列的模式" + rsmd.GetSchemaName(1));  
267.  
268.        System.out.println("1列的类型,返回SqlType中的编号 " + rsmd.getColumnType(1));  
269.  
270.        System.out.println("1列在数据库中的类型，返回类型全名" + rsmd.getColumnTypeName(1));  
271.  
272.        System.out.println("1列类型的精确度(类型的长度): " + rsmd.getPrecision(1));  
273.  
274.        System.out.println("1列小数点后的位数 " + rsmd.getScale(1));  
275.  
276.        System.out.println("1列对应的模式的名称（应该用于Oracle） " + rsmd.getSchemaName(1));  
277.  
278.        System.out.println("1列对应的表名 " + rsmd.getTableName(1));  
279.  
280.        System.out.println("1列是否自动递增" + rsmd.isAutoIncrement(1));  
281.  
282.        System.out.println("1列在数据库中是否为货币型" + rsmd.isCurrency(1));  
283.  
284.        System.out.println("1列是否为空" + rsmd.isNullable(1));  
285.  
286.        System.out.println("1列是否为只读" + rsmd.isReadOnly(1));  
287.  
288.        System.out.println("1列能否出现在where中" + rsmd.isSearchable(1));  
289.  
290.  
291.        rs.close();  
292.          
293.        pst.close();  
294.          
295.    }  
296.  
297.    public static void main(String[] args) throws Exception {  
298.          
299.        //getRsInfo();  
300.          
301.        getDBInfo();  
302.          
303.    }  
304.  
305.} 
-----------------------------------------------
线啦！      独一无二的职位：开源社区经理 



通过DatabaseMetaData从Oracle中获取字段的注释 
.
2012-02-22 17:19591人阅读评论(0)收藏举报
 
oraclepropertiesjdbc数据库commentsnull


今天在扩展ibator插件时,在生成model中每个field的注释时,想从oracle数据库中获取每个字段的comments作为注释.使用jdbc的支持,代码如下:
 
 ResultSet rs = (java.sql.DatabaseMetaData)databaseMetaData.getColumns(localCatalog, localSchema, localTableName, null);
 
        while (rs.next()){
             rs.getString("REMARKS"));  
 
             .............................
 
java.sql.DatabaseMetaData.getColumns 这个方法从注释就能清楚的看到,可以获取数据库的很多元信息,当然包括表和字段的注释.但是,我获取时,却是NULL.GOOGLE了半天,发现原来oracle是需要在连接JDBC获取connection时通过一个参数来设置是否能获取comments.具体如下:
 
Properties props =newProperties();
 
props.put("remarksReporting","true");
 Class.forName("oracle.jdbc.driver.OracleDriver");
 
dbConn = DriverManager.getConnection(url, props);
 DatabaseMetaData dbmd = dbConn.getMetaData();
 
rs = dbmd.getColumns(null,"OPS$AIMSADM","AIRCRAFTS","CODE");
 
if(rs.next()) {System.out.println("Remarks: "+ rs.getObject(12)); } 





原文地址：http://www.cnblogs.com/discuss/articles/1866940.html

